server.port=8081
spring.application.name=order

#### netflix-hystrix

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000
hystrix.command.default.circuitBreaker.requestVolumeThreshold=2
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=3000


hystrix.command.getOrderAccounts.execution.isolation.thread.timeoutInMilliseconds=1000
hystrix.command.getOrderAccounts.circuitBreaker.requestVolumeThreshold=20
hystrix.command.getOrderAccounts.circuitBreaker.errorThresholdPercentage=50
hystrix.command.getOrderAccounts.circuitBreaker.sleepWindowInMilliseconds=5000


#### netflix-ribbon

# ribbon을 사용하는 spring cloud loadbalancer가 retry를 사용할 것인지 여부 (default: true)
spring.cloud.loadbalancer.retry.enabled=true

# ribbon의 eureka 사용여부 (account 서비스 대상) (default: true)
#account.ribbon.eureka.enabled=false

# ribbon이 eureka 미사용시 로드밸런싱 대상 account 서버를 적어주는 프로퍼티
#account.ribbon.listOfServers=localhost:8082,localhost:6666

# References
#https://cloud.spring.io/spring-cloud-netflix/multi/multi_retrying-failed-requests.html
#https://github.com/Netflix/ribbon/wiki/Getting-Started#the-properties-file-sample-clientproperties

# 동일한 서버에 최대 재시도 횟수 (첫 번째 시도 제외, default: 0)
account.ribbon.MaxAutoRetries=0

# 재 시도 할 최대 서버 수 (첫 번째 서버 제외)
account.ribbon.MaxAutoRetriesNextServer=1

# 모든 유형의 Http Methods를 retry 수행할 것인지 여부. (POST 포함)
account.ribbon.OkToRetryOnAllOperations=true

# 로드밸런싱 서버목록 리프레쉬 간격
account.ribbon.ServerListRefreshInterval=2000

# retry 수행할 응답코드만 whitelist로 기재.
#account.ribbon.retryableStatusCodes=404,502


#### eureka client
eureka.instance.prefer-ip-address=true

#### spring actuator
management.endpoints.web.exposure.include=*


#### feign client
feign.hystrix.enabled=true



eureka.client.prefer-same-zone-eureka=true
eureka.client.service-url.zone1=http://10.78.202.109:8761/eureka/
eureka.client.service-url.zone2=http://10.78.212.5:8761/eureka/
eureka.client.region=region1
eureka.client.availability-zones.region1=zone1,zone2
eureka.instance.metadata-map.zone=zone1